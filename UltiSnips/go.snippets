snippet pac
package $0
endsnippet

snippet im "Import packages"
import (
	"${1:}"
)
endsnippet

snippet com "Start a multi line comment"
/* $1 */
endsnippet

snippet main "Create the generic main function" b
func main() {
	$0
}
endsnippet

snippet st
struct $0
endsnippet

snippet map "Create a map" !
map[${1:keytype}]${0:valtype}
endsnippet

snippet err "Insert standard error checking condition" b
if err != nil {
	fmt.Fprintln(os.Stderr, err)
	os.Exit(1)
}
endsnippet

snippet ierr "Insert if err := func style error checking" b
if err := ${1:pkg.Func()}; err != nil {
	fmt.Fprintf(os.Stderr, "error: %s\n", err)
	os.Exit(1)
}

$0
endsnippet

snippet pr
fmt.Print($0)
endsnippet

snippet prl
fmt.Println($0)
endsnippet

snippet prf
fmt.Printf($0)
endsnippet

snippet fpr
fmt.Fprint($0)
endsnippet

snippet fprl
fmt.Fprintln($0)
endsnippet

snippet desc
Describe("$1", func() {
	$0
})
endsnippet

snippet cont
Context("$1", func() {
	$0
})
endsnippet

snippet it
It("$1", func() {
	$0
})
endsnippet

snippet ret
return $0
endsnippet

snippet cobracmd
var $1 = &cobra.Command{
	Use: "$2",
	Short: "$3",
	RunE: func(cmd *cobra.Command, args []string) error {
		$0
		return nil
	},
}
endsnippet

snippet def
defer $0
endsnippet

snippet deff
defer func() {
	$0
}()
endsnippet

snippet fn
func $1($2) $3 {
	$0
}
endsnippet

snippet exit
os.Exit($0)
endsnippet

snippet sleep
time.Sleep($0)
endsnippet

snippet init
func init() {
	$0
}
endsnippet
